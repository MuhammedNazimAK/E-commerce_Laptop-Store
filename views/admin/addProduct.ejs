<%- include('../partials/admin/header') %>
<%- include('../partials/admin/search') %>  

<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">

<style>
    /* Container for images with remove button */
    .img-container {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
        background-color: #f8f9fa;
        padding: 10px;
        border-radius: 8px;
        position: relative;
        box-shadow: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    }

    /* Thumbnail images */
    .img-thumbnail {
        max-height: 180px !important;
        border: 1px solid #ddd;
        padding: 4px;
        border-radius: 4px;
        display: block;
        width: auto;
        max-width: 100% !important;
        margin-right: 10px;
    }

    /* Remove button for images */
    .btn-danger.btn-sm {
        position: absolute;
        top: 10px;
        right: 10px;
        padding: 4px 8px;
        font-size: 0.75rem;
        border-radius: 4px;
        white-space: nowrap;
    }

    /* Error message container */
    .error-message-container {
        height: 20px; 
        margin-top: 5px;
    }

    /* Modal dialog settings */
    .modal-dialog {
        max-width: 60vw; /* Adjust width as needed */
        margin: 1.75rem auto;
    }

    /* Modal content styling */
    .modal-content {
        border-radius: 0.5rem;
    }

    /* Container for the cropper image */
    .cropper-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 60vh; /* Adjust height as needed */
        width: 100%;
    }

    /* Modal image settings */
    .modal-body img {
        max-width: 100%;
        max-height: 60vh; /* Ensures image does not exceed 60% of viewport height */
        object-fit: contain;
        display: block; /* Centers the image horizontally */
        margin: auto; /* Centers the image horizontally */
    }
</style>

<section class="content-main">
    <div class="row">
        <div class="col-12">
            <div class="content-header">
                <h2 class="content-title">Add New Product</h2>
                <div class="text-end">
                    <button class="btn btn-md rounded font-sm hover-up" id="publish">Publish</button>
                </div>
            </div>
        </div>
        <div class="col-lg-7">
            <div class="card mb-4">
                <div class="card-body">
                    <!-- Basic Information -->
                    <div class="mb-4">
                        <label for="product_name" class="form-label">Product Name</label>
                        <input type="text" placeholder="Type here" class="form-control" id="product_name">
                        <div class="error-message-container"><div id="name-error" class="form-error text-danger"></div></div>
                    </div>
                    <div class="mb-4">
                        <label for="product_brand" class="form-label">Brand</label>
                        <select class="form-select" id="product_brand">
                            <option value="" disabled selected>Select Brand</option>
                            <option value="Apple">Apple</option>
                            <option value="Dell">Dell</option>
                            <option value="HP">HP</option>
                            <option value="Lenovo">Lenovo</option>
                            <option value="Asus">Asus</option>
                            <option value="Acer">Acer</option>
                            <option value="MSI">MSI</option>
                            <option value="Samsung">Samsung</option>
                        </select>
                        <div class="error-message-container"><div id="brand-error" class="form-error text-danger"></div></div>
                    </div>
                    <div class="mb-4">
                        <label for="product_description" class="form-label">Description</label>
                        <textarea placeholder="Type here" class="form-control" id="product_description" rows="4"></textarea>
                        <div class="error-message-container"><div id="description-error" class="form-error text-danger"></div></div>
                    </div>
                    
                    <!-- Technical Specifications -->
                    <div class="mb-4">
                        <label for="product_processor" class="form-label">Processor</label>
                        <select class="form-select" id="product_processor">
                            <option value="" disabled selected>Select Processor</option>
                            <option value="AMD Ryzen 3">AMD Ryzen 3</option>
                            <option value="AMD Ryzen 5">AMD Ryzen 5</option>
                            <option value="AMD Ryzen 7">AMD Ryzen 7</option>
                            <option value="AMD Ryzen 9">AMD Ryzen 9</option>
                            <option value="Apple M1">Apple M1</option>
                            <option value="Apple M1 Max">Apple M1 Max</option>
                            <option value="Apple M1 Pro">Apple M1 Pro</option>
                            <option value="Apple M1 Ultra">Apple M1 Ultra</option>
                            <option value="Apple M2">Apple M2</option>
                            <option value="Apple M2 Max">Apple M2 Max</option>
                            <option value="Apple M2 Pro">Apple M2 Pro</option>
                            <option value="Apple M2 Ultra">Apple M2 Ultra</option>
                            <option value="Apple M3">Apple M3</option>
                            <option value="Apple M3 Max">Apple M3 Max</option>
                            <option value="Apple M3 Pro">Apple M3 Pro</option>
                            <option value="Intel Core i3">Intel Core i3</option>
                            <option value="Intel Core i5">Intel Core i5</option>
                            <option value="Intel Core i7">Intel Core i7</option>
                            <option value="Intel Core i9">Intel Core i9</option>
                        </select>
                        <div class="error-message-container"><div id="processor-error" class="form-error text-danger"></div></div>
                    </div>
                    <div class="row gx-3">
                        <div class="col-md-4 mb-3">
                            <label for="product_ram" class="form-label">RAM</label>
                            <select class="form-select" id="product_ram">
                                <option value="" disabled selected>Select RAM</option>
                                <option value="8GB">8GB</option>
                                <option value="16GB">16GB</option>
                                <option value="32GB">32GB</option>
                            </select>
                            <div class="error-message-container"><div id="ram-error" class="form-error text-danger"></div></div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="product_storage" class="form-label">Storage</label>
                            <select class="form-select" id="product_storage">
                                <option value="" disabled selected>Select Storage</option>
                                <option value="256GB">256GB</option>
                                <option value="512GB">512GB</option>
                                <option value="1TB SSD">1TB SSD</option>
                                <option value="2TB SSD">2TB SSD</option>
                            </select>
                            <div class="error-message-container"><div id="storage-error" class="form-error text-danger"></div></div>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="product_graphicsCard" class="form-label">Graphics Card</label>
                            <input type="text" placeholder="Type here" class="form-control" id="product_graphicsCard">
                            <div class="error-message-container"><div id="graphicsCard-error" class="form-error text-danger"></div></div>
                        </div>
                    </div>
                    
                    <!-- Design and Build -->
                    <div class="mb-4">
                        <label for="product_color" class="form-label">Color</label>
                        <input type="text" placeholder="Type here" class="form-control" id="product_color">
                        <div class="error-message-container"><div id="color-error" class="form-error text-danger"></div></div>
                    </div>
                    
                    <!-- Images -->
                    <div class="mb-4">
                        <label for="product_images" class="form-label">Images (Maximum of 5)</label>
                        <input class="form-control" type="file" id="product_images" name="images" multiple>
                        <div id="image-preview" class="mt-3"></div>
                        <div class="error-message-container">
                            <div id="images-error" class="form-error text-danger"></div>
                        </div>
                    </div>                    
                </div>
            </div>
        </div>
        <div class="col-lg-5">
            <div class="card mb-4">
                <div class="card-body">
                    <!-- Pricing and Availability -->
                    <div class="mb-4">
                        <label for="product_regularPrice" class="form-label">Regular Price</label>
                        <input type="number" placeholder="Type here" class="form-control" id="product_regularPrice">
                        <div class="error-message-container"><div id="regularPrice-error" class="form-error text-danger"></div></div>
                    </div>
                    <div class="mb-4">
                        <label for="product_salesPrice" class="form-label">Sales Price</label>
                        <input type="number" placeholder="Type here" class="form-control" id="product_salesPrice">
                    </div>
                    <div class="mb-4">
                        <label for="product_stockAvailability" class="form-label">Stock Availability</label>
                        <input type="number" placeholder="Type here" class="form-control" id="product_stockAvailability">
                        <div class="error-message-container"><div id="stockAvailability-error" class="form-error text-danger"></div></div>
                    </div>
                    
                    <!-- Status -->
                    <div class="mb-4">
                        <label class="form-label">Status</label>
                        <select class="form-select" id="product_status">
                            <option value="Published">Published</option>
                            <option value="Draft">Draft</option>
                        </select>
                    </div>
                    
                    <!-- Categories -->
                    <hr>
                    <h5 class="mb-3">Categories</h5>
                    <div id="category-list">
                        <% categories.filter(category => !category.isBlocked).forEach(category => { %>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="<%= category._id %>" name="category" id="category-<%= category._id %>">
                                <label class="form-check-label" for="category-<%= category._id %>"> <%= category.name %> </label>
                            </div>
                        <% }); %>
                        <div class="error-message-container"><div id="categories-error" class="form-error text-danger"></div></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<%- include("../partials/admin/footer") %>

<!-- Image Cropper Modal -->
<div class="modal fade" id="image-cropper-modal" tabindex="-1" aria-labelledby="image-cropper-modal-label" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="image-cropper-modal-label">Crop Image</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="cropper-container">
                    <img id="image-to-crop" src="" alt="Image to crop" style="width: 100%; max-height: 70vh; object-fit: contain;">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="crop-save">Save</button>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
<script>

document.addEventListener('DOMContentLoaded', function() {
const imageCropperModal = new bootstrap.Modal(document.getElementById('image-cropper-modal'), {});

let cropper;
    let orginalImages = new Map();

function isImageFile(file) {
    return file && file['type'].startsWith('image/');
}

async function handleProductImages(event) {
    const formData = new FormData();
    const files = document.querySelector('#product_images').files;
    for (let i = 0; i < files.length; i++) {
        formData.append('images', files[i]);
    }

    if (!files || files.length === 0) {
        console.error('No files selected.');
        return;
    }

    for (let i = 0; i < files.length; i++) {
        if (!isImageFile(files[i])) {
            Swal.fire({
                title: "Error!",
                text: "Only image files are allowed.",
                icon: "error"
            });
            return;
        }
        formData.append('images', files[i]);
    }

    return formData;
}

let selectedFiles = [];
    const imageInput = document.getElementById('product_images');
    const imagePreviewContainer = document.getElementById('image-preview');
    const imageToCrop = document.getElementById('image-to-crop');
    const cropSaveButton = document.getElementById('crop-save');

    function initImageCropper(modal) {
        let currentImage;

        const handleImageClick = (img) => {
            currentImage = img;
            imageToCrop.src = orginalImages.get(img) || img.src;
            modal.show();
        };

        const handleCropSave = (button) => {
            button.addEventListener('click', () => {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas();
                    if (canvas) {
                        canvas.toBlob((blob) => {
                            const url = URL.createObjectURL(blob);
                            currentImage.src = url;
                            modal.hide();
                        }, 'image/jpeg');
                    }
                }
            });
        };

        modal._element.addEventListener('shown.bs.modal', () => {
            cropper = new Cropper(imageToCrop, {
                aspectRatio: 1,
                viewMode: 2,
                autoCropArea: 1,
                guides: true,
                zoomable: true
            });
        });

        modal._element.addEventListener('hidden.bs.modal', () => {
            cropper.destroy();
            cropper = null;
        });

        return { handleImageClick, handleCropSave };
    }

    if (imageCropperModal && imageCropperModal._element) {
        const { handleImageClick, handleCropSave } = initImageCropper(imageCropperModal);
        handleCropSave(cropSaveButton);
        imagePreviewContainer.addEventListener('click', (event) => {
            if (event.target.matches('img')) {
                handleImageClick(event.target);
            }
        });
    }

    const reader = new FileReader();
    reader.onload = function (e) {
        const img = document.createElement('img');
        img.src = e.target.result;
        img.classList.add('img-thumbnail');
        img.style.cursor = 'pointer';
        img.loading = 'lazy';

        orginalImages.set(img, e.target.result);

        const imageContainer = document.createElement('div');
        imageContainer.classList.add('img-container');
        imageContainer.appendChild(img);

        const deleteButton = createDeleteButton(imageContainer);
        imageContainer.appendChild(deleteButton);

        imagePreviewContainer.appendChild(imageContainer);
    };

    imageInput.addEventListener('change', (event) => {
        const newFiles = Array.from(event.target.files);
        selectedFiles = [...selectedFiles, ...newFiles];
        
        event.target.value = '';

        updateImagePreview();
    });

    function updateImagePreview() {
        imagePreviewContainer.innerHTML = ''; // Clear existing previews
        selectedFiles.forEach((file, index) => {
            const reader = new FileReader();
            reader.onload = function(e) {
                const img = document.createElement('img');
                img.src = e.target.result;
                img.classList.add('img-thumbnail');
                img.style.cursor = 'pointer';
                img.loading = 'lazy';

                const imageContainer = document.createElement('div');
                imageContainer.classList.add('img-container');
                imageContainer.appendChild(img);

                const deleteButton = createDeleteButton(index);
                imageContainer.appendChild(deleteButton);

                imagePreviewContainer.appendChild(imageContainer);
            };
            reader.readAsDataURL(file);
        });
    }

    const handleFiles = async (files) => {
        files.forEach(file => {
            if (isImageFile(file)) {
                reader.readAsDataURL(file);
            } else {
                Swal.fire({
                    title: "Error!",
                    text: "Only image files are allowed.",
                    icon: "error"
                });
            }
        });
    }

    const createDeleteButton = (index) => {
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'Delete';
        deleteButton.classList.add('btn', 'btn-danger', 'btn-sm');
        deleteButton.style.position = 'absolute';
        deleteButton.style.top = '10px';
        deleteButton.style.right = '10px';
        deleteButton.style.zIndex = '1000';

        deleteButton.addEventListener('click', (event) => {
            event.stopPropagation();
            selectedFiles.splice(index, 1);
            updateImagePreview();
        });

        return deleteButton;
    };


const validateForm = () => {
    let isValid = true;
    let errors = {};

    const name = document.getElementById('product_name').value.trim();
    const brand = document.getElementById('product_brand').value.trim();
    const description = document.getElementById('product_description').value.trim();
    const processor = document.getElementById('product_processor').value.trim();
    const ram = document.getElementById('product_ram').value.trim();
    const storage = document.getElementById('product_storage').value.trim();
    const graphicsCard = document.getElementById('product_graphicsCard').value.trim();
    const color = document.getElementById('product_color').value.trim();
    const regularPrice = document.getElementById('product_regularPrice').value.trim();
    const stockAvailability = document.getElementById('product_stockAvailability').value.trim();
    const images = document.querySelector('#product_images').files.length;
    const categories = Array.from(document.querySelectorAll('input[name="category"]:checked')).map(cb => cb.value);

    // Check required fields
    if (!name) {
        errors.name = 'Product name is required.';
        isValid = false;
    }
    if (!brand) {
        errors.brand = 'Brand is required.';
        isValid = false;
    }
    if (!description) {
        errors.description = 'Description is required.';
        isValid = false;
    }
    if (!processor) {
        errors.processor = 'Processor is required.';
        isValid = false;
    }
    if (!ram) {
        errors.ram = 'RAM is required.';
        isValid = false;
    }
    if (!storage) {
        errors.storage = 'Storage is required.';
        isValid = false;
    }
    if (!color) {
        errors.color = 'Color is required.';
        isValid = false;
    }
    if (!regularPrice || isNaN(regularPrice) || regularPrice <= 0) {
        errors.regularPrice = 'Regular Price is required.';
        isValid = false;
    }
    if (!stockAvailability || isNaN(stockAvailability) || stockAvailability < 0) {
        errors.stockAvailability = 'Stock Availability is required.';
        isValid = false;
    }
    // if (images === 0) {
    //     errors.images = 'At least one image is required.';
    //     isValid = false;
    // }
    if (categories.length === 0) {
        errors.categories = 'At least one category is required.';
        isValid = false;
    }

    // Display errors
    document.querySelectorAll('.form-error').forEach(el => el.textContent = '');
    Object.keys(errors).forEach(key => {
        document.getElementById(`${key}-error`).textContent = errors[key];
    });

    return isValid;
};

const form = document.getElementById('product-form');

const resetForm = () => {
    if (form) {
        form.reset();

    if (imagePreviewContainer) imagePreviewContainer.innerHTML = '';

    const selects = document.querySelectorAll('select');
    selects.forEach(select => select.value = '');

    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => checkbox.checked = false);

    const errorMessages = document.querySelectorAll('.form-error');
    errorMessages.forEach(errorMessage => errorMessage.textContent = '');
} else {
    console.error('Form not found');
}
};

document.getElementById('publish').addEventListener('click', async (event) => {
    event.preventDefault();
    const publishButton = event.target;

    if (!validateForm()) return;

    publishButton.disabled = true;
    publishButton.textContent = 'Publishing...';

    const formData = new FormData();

    formData.append('name', document.getElementById('product_name').value);
    formData.append('brand', document.getElementById('product_brand').value);
    formData.append('description', document.getElementById('product_description').value);
    formData.append('processor', document.getElementById('product_processor').value);
    formData.append('ram', document.getElementById('product_ram').value);
    formData.append('storage', document.getElementById('product_storage').value);
    formData.append('graphicsCard', document.getElementById('product_graphicsCard').value);
    formData.append('color', document.getElementById('product_color').value);
    formData.append('regularPrice', document.getElementById('product_regularPrice').value);
    formData.append('salesPrice', document.getElementById('product_salesPrice').value);
    formData.append('stockAvailability', document.getElementById('product_stockAvailability').value);
    formData.append('status', document.getElementById('product_status').value);

    const categories = Array.from(document.querySelectorAll('input[name="category"]:checked'))
        .map(checkbox => checkbox.value);
    formData.append('categories', JSON.stringify(categories));

    selectedFiles.forEach((file, index) => {
            formData.append('images', file);
        });

    try {
        const response = await axios.post('/admin/products/add', formData, {
            headers: {
                'Content-Type': 'multipart/form-data'
            }
        });

        if (response.data.success) {
            Swal.fire({
                title: "Success!",
                text: "Product saved successfully.",
                icon: "success"
            });  
            resetForm();   
            clearForm();
        } else {
            Swal.fire({
                title: "Error!",
                text: data.message || "There was an error saving the product.",
                icon: "error"
            });
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: "Error!",
            text: "There was an error saving the product.",
            icon: "error"
        });
    } finally {
        publishButton.disabled = false;
        publishButton.textContent = 'Publish';
    }
});

function clearForm() {
    
    const form = document.getElementById('product-form');

    if (form) {
        form.reset();
    } else {
        console.error('Form not found');
    }

    selectedFiles = [];

    const fileInput = document.getElementById('product_images');
    if (fileInput) {
        fileInput.value = '';
    }
    const previewContainer = document.getElementById('image-preview-container');
    if (previewContainer) {
        previewContainer.innerHTML = '';
    }

    const selects = document.querySelectorAll('select');
    selects.forEach(select => select.value = '');

    const checkboxes = document.querySelectorAll('input[type="checkbox"]');
    checkboxes.forEach(checkbox => checkbox.checked = false);

    const errorMessages = document.querySelectorAll('.form-error');
    errorMessages.forEach(errorMessage => errorMessage.textContent = '');
}
});

</script>
