<%- include("../partials/admin/header") %>
<%- include("../partials/admin/search") %>

<section class="content-main">
  <div class="content-header">
    <h2 class="content-title card-title">Order List</h2>
</div>
<input type="text" id="searchOrderId" placeholder="Search order ID" class="form-control bg-white">

  <div class="card mb-4">
    <header class="card-header">
      <div class="row gx-3">
        <div class="col-lg-4 col-md-6 me-auto">
          <input type="text" id="searchGeneral" placeholder="Search..." class="form-control">
        </div>
        <div class="col-lg-2 col-6 col-md-3">
          <select id="statusFilter" class="form-select">
            <option value="">All Statuses</option>
            <option value="Pending">Pending</option>
            <option value="Processing">Processing</option>
            <option value="Shipped">Shipped</option>
            <option value="Delivered">Delivered</option>
            <option value="Cancelled">Cancelled</option>
            <option value="Return Requested">Return Requested</option>
            <option value="Return Approved">Return Approved</option>
            <option value="Return Rejected">Return Rejected</option>
            <option value="Returned">Returned</option>
          </select>
        </div>        
        <div class="col-lg-2 col-6 col-md-3">
          <select id="pageSize" class="form-select">
            <option value="10">Show 10</option>
            <option value="20">Show 20</option>
            <option value="50">Show 50</option>
          </select>
        </div>
      </div>
    </header>

    <div class="card-body">
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>#ID</th>
              <th>Name</th>
              <th>Email</th>
              <th>Total</th>
              <th>Status</th>
              <th>Date</th>
              <th class="text-end">Action</th>
            </tr>
          </thead>
          <tbody id="orderTableBody">
            <!-- Order rows will be dynamically inserted here -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <nav aria-label="Page navigation">
    <ul id="pagination" class="pagination justify-content-center">
      <li class="page-item" id="prevPageItem">
        <a class="page-link" href="#" aria-label="Previous" id="prevPage">
          <span aria-hidden="true">&laquo;</span>
          <span class="sr-only">Previous</span>
        </a>
      </li>
      <!-- Page numbers will be dynamically inserted here -->
      <li class="page-item" id="nextPageItem">
        <a class="page-link" href="#" aria-label="Next" id="nextPage">
          <span aria-hidden="true">&raquo;</span>
          <span class="sr-only">Next</span>
        </a>
      </li>
    </ul>
  </nav>  
</section>

<!-- Edit Order Modal -->
<div class="modal fade" id="editOrderModal" tabindex="-1" aria-labelledby="editOrderModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="editOrderModalLabel">Edit Order</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="editOrderForm">
          <input type="hidden" id="editOrderId">
          <div class="mb-3">
            <label for="editOrderStatus" class="form-label">Status</label>
            <select class="form-select" id="editOrderStatus">
              <option value="Pending">Pending</option>
              <option value="Processing">Processing</option>
              <option value="Shipped">Shipped</option>
              <option value="Delivered">Delivered</option>
              <!-- <option value="Return Requested">Return Requested</option>
              <option value="Return Approved">Return Approved</option>
              <option value="Return Rejected">Return Rejected</option>
              <option value="Returned">Returned</option> -->
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="saveOrderChanges()">Save changes</button>
      </div>
    </div>
  </div>
</div>

<!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Order Information</h6>
                        <p><strong>Order ID:</strong> <span id="orderId"></span></p>
                        <p><strong>Status:</strong> <span id="orderStatus"></span></p>
                        <p><strong>Date:</strong> <span id="orderDate"></span></p>
                        <p><strong>Total:</strong> <span id="orderTotal"></span></p>
                        <p><strong>Payment Method:</strong> <span id="orderPayment"></span></p>
                    </div>
                    <div class="col-md-6">
                        <h6>Customer Information</h6>
                        <p><strong>Name:</strong> <span id="customerName"></span></p>
                        <p><strong>Email:</strong> <span id="customerEmail"></span></p>
                        <p><strong>Phone:</strong> <span id="customerPhone"></span></p>
                        <p><strong>Shipping Address:</strong> <span id="shippingAddress"></span></p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Order Items</h6>
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Total</th>
                                    <th>Return Status</th>
                                </tr>
                            </thead>
                            <tbody id="orderItemsTableBody">
                                <!-- Order items will be dynamically inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Return Edit Modal -->
<div class="modal fade" id="returnEditModal" tabindex="-1" aria-labelledby="returnEditModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="returnEditModalLabel">Edit Return Status</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="returnEditForm">
          <input type="hidden" id="returnEditOrderId">
          <input type="hidden" id="returnEditProductId">
          <div class="mb-3">
            <label for="returnEditStatus" class="form-label">Return Status</label>
            <select class="form-select" id="returnEditStatus">
              <option value="Return Approved">Approve Return</option>
              <option value="Return Rejected">Reject Return</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" onclick="saveReturnChanges()">Save changes</button>
      </div>
    </div>
  </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  let currentPage = 1;
  let totalPages = 1;
  let ordersPerPage = 10;

  const statusClasses = {
    'Pending': 'warning',
    'Processing': 'info',
    'Shipped': 'primary',
    'Delivered': 'success',
    'Cancelled': 'danger',
    'Return Requested': 'secondary',
    'Return Approved': 'info',
    'Return Rejected': 'danger',
    'Returned': 'success'
  };

  const getStatusClass = (status) => statusClasses[status] || 'secondary';

  const fetchOrders = async () => {
    try {
      const searchOrderId = document.getElementById('searchOrderId').value;
      const searchGeneral = document.getElementById('searchGeneral').value;
      const statusFilter = document.getElementById('statusFilter').value;
      ordersPerPage = parseInt(document.getElementById('pageSize').value);

      const response = await axios.get('/admin/orders-list', {
        params: {
          page: currentPage,
          limit: ordersPerPage,
          searchOrderId,
          searchGeneral,
          status: statusFilter
        }
      });

      const { orders, totalPages: pages, currentPage: fetchedPage, currentStatus } = response.data;
      totalPages = pages;
      currentPage = fetchedPage;
      renderOrders(orders);
      renderPagination();
      setTimeout(() => updateStatusFilter(currentStatus), 0);
    } catch (error) {
      console.error('Error fetching orders:', error);
      showError('Failed to fetch orders. Please try again.');
    }
  };

  const renderOrders = (orders) => {
    const tableBody = document.getElementById('orderTableBody');
    tableBody.innerHTML = orders.map(order => `
      <tr>
        <td>${order.orderId}</td>
        <td><b>${order.userId.firstName} ${order.userId.lastName}</b></td>
        <td>${order.userId.email}</td>
        <td>₹${(order.total).toFixed(2)}</td> 
        <td><span class="badge rounded-pill alert-${getStatusClass(order.status)}">${order.status}</span></td>
        <td>${new Date(order.createdAt).toLocaleDateString()}</td>
        <td class="text-end">
          <button onclick="fetchOrderItems('${order._id}')" class="btn btn-sm btn-outline-primary">View Items</button>
          <button onclick="editOrder('${order._id}')" class="btn btn-sm btn-outline-primary" ${['Delivered', 'Cancelled', 'Shipped', 'Returned'].includes(order.status) ? 'disabled' : ''}>Edit</button>
          <button onclick="cancelOrder('${order._id}')" class="btn btn-sm btn-outline-danger" ${['Delivered', 'Cancelled', 'Shipped', 'Returned'].includes(order.status) ? 'disabled' : ''}>Cancel</button>
        </td>
      </tr>
    `).join('');
  };

  const renderPagination = () => {
  const pagination = document.getElementById('pagination');
  const prevPageItem = document.getElementById('prevPageItem');
  const nextPageItem = document.getElementById('nextPageItem');

  // Clear existing page number buttons
  while (pagination.children.length > 2) {
    pagination.removeChild(pagination.children[1]);
  }

  // Update Previous button
  prevPageItem.classList.toggle('disabled', currentPage === 1);
  prevPageItem.querySelector('a').onclick = (e) => {
    e.preventDefault();
    if (currentPage > 1) changePage(currentPage - 1);
  };

  // Update Next button
  nextPageItem.classList.toggle('disabled', currentPage === totalPages);
  nextPageItem.querySelector('a').onclick = (e) => {
    e.preventDefault();
    if (currentPage < totalPages) changePage(currentPage + 1);
  };

  // Add page number buttons
  const startPage = Math.max(1, currentPage - 2);
  const endPage = Math.min(totalPages, currentPage + 2);

  for (let i = startPage; i <= endPage; i++) {
    const li = document.createElement('li');
    li.className = `page-item ${i === currentPage ? 'active' : ''}`;
    
    const a = document.createElement('a');
    a.className = 'page-link';
    a.href = '#';
    a.textContent = i;
    a.onclick = (e) => {
      e.preventDefault();
      changePage(i);
    };

    li.appendChild(a);
    pagination.insertBefore(li, nextPageItem);
    }
  };


  const changePage = (page) => {
    currentPage = page;
    fetchOrders();
  };

  const editOrder = async (orderId) => {
    try {
      const response = await axios.get(`/admin/orders/${orderId}`);
      const order = response.data;
      
      if (['Delivered', 'Cancelled', 'Shipped', 'Returned'].includes(order.status)) {
        showError('Cannot edit this order in its current status.');
        return;
      }
      
      document.getElementById('editOrderId').value = order._id;
      document.getElementById('editOrderStatus').value = order.status;
      
      new bootstrap.Modal(document.getElementById('editOrderModal')).show();
    } catch (error) {
      console.error('Error fetching order details:', error);
      showError('Failed to fetch order details. Please try again.');
    }
  };

  const saveOrderChanges = async () => {
    try {
      const orderId = document.getElementById('editOrderId').value;
      const status = document.getElementById('editOrderStatus').value;
      
      const response = await axios.get(`/admin/orders/${orderId}`);
      const order = response.data;
      
      if (['Delivered', 'Cancelled', 'Shipped', 'Returned'].includes(order.status)) {
        showError('Cannot update this order in its current status.');
        return;
      }
      
      await axios.put(`/admin/edit-order/${orderId}`, { status });
      
      bootstrap.Modal.getInstance(document.getElementById('editOrderModal')).hide();
      fetchOrders();
      showSuccess('Order updated successfully');
    } catch (error) {
      console.error('Error updating order:', error);
      showError('Failed to update order. Please try again.');
    }
  };

  const cancelOrder = async (orderId) => {
      if (confirm('Are you sure you want to cancel this order?')) {
        try {
          const response = await axios.get(`/admin/orders/${orderId}`);
          const order = response.data;
          
          if (['Delivered', 'Cancelled', 'Shipped', 'Returned'].includes(order.status)) {
            showError('Cannot cancel this order in its current status.');
            return;
          }
          
          await axios.put(`/admin/edit-order/${orderId}`, { status: 'Cancelled' });
          fetchOrders();
          showSuccess('Order cancelled successfully');
        } catch (error) {
          console.error('Error cancelling order:', error);
          showError('Failed to cancel order. Please try again.');
        }
      }
    };

  const fetchOrderItems = async (orderId) => {
    try {
      const response = await axios.get(`/admin/orders/${orderId}`);
      const order = response.data;
      renderOrderDetails(order);
      new bootstrap.Modal(document.getElementById('orderDetailsModal')).show();
    } catch (error) {
      console.error('Error fetching order details:', error);
      showError('Failed to fetch order details. Please try again.');
    }
  };

  const renderOrderDetails = (order) => {
      if (!order) {
          console.error('Order object is undefined');
          return;
      }

      // Order Information
      document.getElementById('orderId').textContent = order.orderId || 'N/A';
      document.getElementById('orderStatus').textContent = order.status || 'N/A';
      document.getElementById('orderDate').textContent = order.createdAt ? new Date(order.createdAt).toLocaleString() : 'N/A';
      document.getElementById('orderTotal').textContent = order.total ? `₹${(order.total).toFixed(2)}` : 'N/A';
      document.getElementById('orderPayment').textContent = order.paymentMethod || 'N/A';

      // Customer Information
      document.getElementById('customerName').textContent = order.userId ? `${order.userId.firstName} ${order.userId.lastName}` : 'N/A';
      document.getElementById('customerEmail').textContent = order.userId ? order.userId.email : 'N/A';
      document.getElementById('customerPhone').textContent = order.userId ? order.userId.mobile : 'N/A';

      // Shipping Address
      const shippingAddressElement = document.getElementById('shippingAddress');
      if (order.shippingAddress) {
        shippingAddressElement.textContent = `
          ${order.shippingAddress.name}, 
          ${order.shippingAddress.addressType}, 
          ${order.shippingAddress.landMark}, 
          ${order.shippingAddress.city}, 
          ${order.shippingAddress.state} - ${order.shippingAddress.pinCode}, 
          Mobile: ${order.shippingAddress.mobile}
        `;
      } else {
        shippingAddressElement.textContent = 'N/A';
      }

      // Render Order Items
      const orderItemsTableBody = document.getElementById('orderItemsTableBody');
      orderItemsTableBody.innerHTML = '';

      if (Array.isArray(order.products)) {
        order.products.forEach(item => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${item.product.basicInformation?.name || 'N/A'}</td>
            <td>${item.quantity || 'N/A'}</td>
            <td>₹${(item.price).toFixed(2)}</td>
            <td>₹${((item.quantity * item.price)).toFixed(2)}</td>
            <td>${item.returnStatus || 'Not Returned'}</td>
            <td>
              ${order.status === 'Delivered' && item.returnStatus === 'Return Requested' 
                ? `<button class="btn btn-sm btn-primary" onclick="editReturnStatus('${order._id}', '${item.product._id}')">Edit Return</button>`
                : ''}
            </td>
          `;
          orderItemsTableBody.appendChild(row);
        });
      } else {
        console.error('Order products is not an array:', order.products);
      }
  };

  function viewOrderDetailsAdmin(orderId) {
    axios.get(`/admin/orders/${orderId}`)
      .then(response => {
        const order = response.data;
        
        const modal = new bootstrap.Modal(document.getElementById('orderDetailsModal'));
        modal.show();
      })
      .catch(error => {
        console.error('Error fetching order details:', error);
        showError('Failed to fetch order details');
      });
  }

  const updateStatusFilter = (currentStatus) => {
    const statusFilter = document.getElementById('statusFilter');
    if (currentStatus) {
      statusFilter.value = currentStatus;
    } else {
      statusFilter.value = '';
    }
  };

  const editReturnStatus = async (orderId, productId) => {
  try {
    const response = await axios.get(`/admin/orders/${orderId}`);
    const order = response.data;
    const product = order.products.find(p => p.product._id === productId);

    document.getElementById('returnEditOrderId').value = orderId;
    document.getElementById('returnEditProductId').value = productId;
    new bootstrap.Modal(document.getElementById('returnEditModal')).show();
  } catch (error) {
    console.error('Error fetching order details:', error);
    showError('Failed to fetch order details');
  }
};

  const saveReturnChanges = async () => {
  try {
    const orderId = document.getElementById('returnEditOrderId').value;
    const productId = document.getElementById('returnEditProductId').value;
    const status = document.getElementById('returnEditStatus').value;

    await axios.put(`/admin/edit-return/${orderId}/${productId}`, { status });

    bootstrap.Modal.getInstance(document.getElementById('returnEditModal')).hide();

    fetchOrderItems(orderId); // Refresh the order details
    showSuccess('Return status updated successfully');
    setTimeout(() => {
            window.location.reload();
    }, 3000);
  } catch (error) {
    console.error('Error updating return status:', error);
    showError('Failed to update return status. Please try again.');
  }
};

  function showError(message) {
      Swal.fire({
          icon: "error",
          text: message,
          toast: true,
          position: "top-right",
          showConfirmButton: false,
          timerProgressBar: true,
          timer: 3000,
      });
  }

  function showSuccess(message) {
      Swal.fire({
          icon: "success",
          text: message,
          toast: true,
          position: "top-right",
          showConfirmButton: false,
          timerProgressBar: true,
          timer: 3000,
      });
  }

  document.getElementById('searchOrderId').addEventListener('input', () => {
    currentPage = 1;
    fetchOrders();
  });
  document.getElementById('searchGeneral').addEventListener('input', () => {
    currentPage = 1;
    fetchOrders();
  });
  document.getElementById('statusFilter').addEventListener('change', () => {
    currentPage = 1;
    fetchOrders();
  });
  document.getElementById('pageSize').addEventListener('change', () => {
    currentPage = 1;
    fetchOrders();
  });

  fetchOrders();

</script>

<%- include("../partials/admin/footer") %>
